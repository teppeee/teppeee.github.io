<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[teppeeeのブログ]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://teppeee.github.io/"/>
  <updated>2015-01-25T20:24:21.321Z</updated>
  <id>http://teppeee.github.io/</id>
  
  <author>
    <name><![CDATA[teppeee]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[IntelliJ IDEAでGAE/Goの開発環境をつくる]]></title>
    <link href="http://teppeee.github.io/2015/01/25/intelliJ-gaego/"/>
    <id>http://teppeee.github.io/2015/01/25/intelliJ-gaego/</id>
    <published>2015-01-25T09:57:17.000Z</published>
    <updated>2015-01-25T20:24:08.000Z</updated>
    <content type="html"><![CDATA[<p>GAEを使ってみようと思います。<br>Googleのアカウントを持っているだけで、<br>WEBアプリが作れてしまいます。</p>
<a id="more"></a>

<h2 id="GAEプロジェクト作成～SDKインストール">GAEプロジェクト作成～SDKインストール</h2>
<p>チュートリアルにしたがって進めてみます。<br><a href="https://cloud.google.com/appengine/docs" target="_blank" rel="external">https://cloud.google.com/appengine/docs</a><br>の「try it now」ボタンより</p>
<p><a href="https://cloud.google.com/sdk/" target="_blank" rel="external">SDK</a>をダウンロードします。<br>次のコマンドを使って Go 用 App Engine パッケージをインストールします:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcloud components <span class="keyword">update</span> gae-<span class="keyword">go</span></div></pre></td></tr></table></figure>

<p>言語別のSDK単体もありますが、<br>管理ツールがついてくるこちらからインストールしたほうがよいです。<br>SDKはそのままのパスでProgram Filesにインストールすると<br>半角スペースが原因で<code>goapp serve</code>が動かないので注意です。</p>
<p>GAE用のプロジェクトも作成します。ここで割り振られた<br>プロジェクトIDをデプロイ時に使用します。</p>
<p>あとは<br>SDKをインストールしたフォルダの中の\platform\google_appengine<br>にツール類があるのでパスを通します</p>
<h2 id="IntelliJ_IDEAの設定">IntelliJ IDEAの設定</h2>
<p>プロジェクトを作成します。<br>Create New Project &gt; Go App Engine　を選択します。</p>
<p><img src="http://teppeee.github.io\img\newproject.jpg" alt="newproject.jpg"></p>
<p>適当に名前をつけて作成します。</p>
<p>次にFile &gt; ProjectStructure &gt; SDKの＋ボタンよりSDKを追加します。<br>SDKのpathは SDKをインストールしたフォルダの中の\platform\google_appengineを指定します。</p>
<p><img src="http://teppeee.github.io\img\SDK.jpg" alt="SDK.jpg"></p>
<p>追加したSDKを　ProjectStructure &gt; Project より選択します。</p>
<p><img src="http://teppeee.github.io\img\projectSDK.jpg" alt="projectSDK.jpg"></p>
<p>ひな形のプロジェクトが作成されます。</p>
<p><img src="http://teppeee.github.io\img\gaeproject.jpg" alt="gaeproject.jpg"></p>
<p>app.yamlを編集してapplicationの部分をGAEのコンソールのプロジェクトIDにしておきます。</p>
<figure class="highlight yaml"><figcaption><span>app.yaml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">application</span>: <span class="string">your prject id</span></div><div class="line"><span class="attribute">version</span>: <span class="string">1</span></div><div class="line"><span class="attribute">runtime</span>: <span class="string">go</span></div><div class="line"><span class="attribute">api_version</span>: <span class="string">go1</span></div><div class="line"></div><div class="line"><span class="vim">handler<span class="variable">s:</span></span></div><div class="line">- ur<span class="variable">l:</span> /.*</div><div class="line">  <span class="keyword">scrip</span><span class="variable">t:</span> _go_app</div></pre></td></tr></table></figure>

<h2 id="ローカルで動かしてみる">ローカルで動かしてみる</h2>
<p>右上の下矢印よりEdit Configurations &gt; 「+」ボタン &gt; Go Local AppEngine Serverを選択</p>
<p><img src="http://teppeee.github.io\img\editConfigration.jpg" alt="editConfigration.jpg"></p>
<p>特に設定は変更せず、適当にNameをつけて保存します。</p>
<p><img src="http://teppeee.github.io\img\editConfiguration1.jpg" alt="editConfiguration1.jpg"></p>
<p>作成した実行プロファイルを選択して、緑色の「▽」ボタンを押して実行します。</p>
<p><img src="http://teppeee.github.io\img\runlocalserver.jpg" alt="runlocalserver.jpg"></p>
<p>localhost:8000 にアクセスしてみると開発用の管理画面が表示されます。</p>
<p><img src="http://teppeee.github.io\img\localserver.jpg" alt="localserver.jpg"></p>
<p>「default」を押すと動いているのが確認できます。</p>
<p><img src="http://teppeee.github.io\img\localserver1.jpg" alt="localserver1.jpg"></p>
<h2 id="GAE上にデプロイしてみます">GAE上にデプロイしてみます</h2>
<p>まず<code>goapp deploy</code>してみましたが、認証がうまく通りませんでした。<br>SDKにGoogle App Engine Launcherというのがついているのでこれを使ってみます。</p>
<p>File &gt; Add Existing Application で作ったプロジェクトを選択します。<br><img src="http://teppeee.github.io\img\sdklauncher.jpg" alt="sdklauncher.jpg"></p>
<p>あとは「Deploy」ボタンをおしてGoogleアカウントのID・パスワードを入力すると<br>デプロイすることができました。</p>
<p><code>http://{your project id}.appspot.com/</code><br>にアクセスすると動いているのを確認することができます。</p>
<h2 id="気になったところ">気になったところ</h2>
<p>IntelliJ IDEA上でgo fmt等のツールがエラーになるようになっていました。</p>
<p><img src="http://teppeee.github.io\img\fmterror.jpg" alt="fmterror.jpg"></p>
<p>SDKをみてみるとgorootというフォルダがあり<br>SDK内にGOそのものを内包しており、GAEではこちらがGOROOTになるようです。</p>
<p>IntelliJ IDEA　の　Setting &gt; Tools &gt; Google Goで<br>GOROOTにplatform\google_appengine\gorootを選択しようとしましたが<br>エラーになり選択できませんでした。</p>
<p>荒業ですが、<br>IntelliJ IDEAはplatform\google_appengine\の直下を見に行ってるようなので<br>platform\google_appengine\goroot\binのツール類(go fmt等)を<br>platform\google_appengine\にコピーしてやれば動きました。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>GAEを使ってみようと思います。<br>Googleのアカウントを持っているだけで、<br>WEBアプリが作れてしまいます。</p>
]]>
    
    </summary>
    
      <category term="GAE" scheme="http://teppeee.github.io/tags/GAE/"/>
    
      <category term="IntelliJIDEA" scheme="http://teppeee.github.io/tags/IntelliJIDEA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Google Cloud Platformについて簡単に]]></title>
    <link href="http://teppeee.github.io/2015/01/18/google-cloud/"/>
    <id>http://teppeee.github.io/2015/01/18/google-cloud/</id>
    <published>2015-01-17T23:21:11.000Z</published>
    <updated>2015-01-18T00:08:50.000Z</updated>
    <content type="html"><![CDATA[<p>AWSほど多様なことはできないが、お手軽です。<br>当然C#は使えない(-_-;)<br>データセンターがおそらく日本にないのでレイテンシが気になりますが、<br>AWSもAzureもできたのでそのうちできるのではないかと勝手に思っています。</p>
<h2 id="App_Engine"><a href="https://cloud.google.com/appengine/" target="_blank" rel="external">App Engine</a></h2>
<ul>
<li><p>PaaS（Platform-as-a-Service）<br>使える言語・できることは限られているが<br>プログラムを書いてデプロイしたらすぐにWEBアプリを動かすことができる。</p>
</li>
<li><p>Python、Java、PHP、Goに対応</p>
</li>
<li><p>シャーディング、負荷分散はGoogleがやってくれる。</p>
</li>
<li><p>28 インスタンス時間無料(2014 年 4 月 1 日より)<br>アクセスが多いときは自動でインスタンスが複数立ち上がり分散してくれるが、その分インスタンス時間を消費する<br><a href="http://genesis-tdsg.blogspot.jp/2014/02/gae.html" target="_blank" rel="external">http://genesis-tdsg.blogspot.jp/2014/02/gae.html</a> の実験を参考にすると<br>20～25人のユーザがF5アタックしているような状態まで、１インスタンスで対処することが出来る。</p>
</li>
<li><p>タスクキューで定期的なタスクを実行できる。</p>
</li>
</ul>
<p>Cloud SQL、Cloud Datastore、Cloud Storageと組み合わせることである程度のことまではできそう。</p>
<a id="more"></a>


<h2 id="Cloud_Storage"><a href="https://cloud.google.com/storage/" target="_blank" rel="external">Cloud Storage</a></h2>
<ul>
<li>ストレージ　<br>Googleドライブと何が違うのかというと</li>
</ul>
<blockquote>
<p>Google ドライブはユーザー向けで、Google Cloud Storage はデベロッパー向けです。</p>
</blockquote>
<p>とのこと</p>
<h2 id="Cloud_Datastore"><a href="https://cloud.google.com/datastore/" target="_blank" rel="external">Cloud Datastore</a></h2>
<ul>
<li><p>NoSQLのデータベース</p>
</li>
<li><p>Cloud Storageにバックアップを行うことができる。</p>
</li>
<li><p>操作回数に応じて課金される。<br>Memcache併用で課金を抑えられそう。</p>
</li>
</ul>
<h2 id="Cloud_SQL"><a href="https://cloud.google.com/sql/" target="_blank" rel="external">Cloud SQL</a></h2>
<ul>
<li><p>MySQL<br>コンソールからインスタンスを作ったりスペックを簡単に変更できる。</p>
</li>
<li><p>Cloud Datastore同様Cloud Storageにバックアップを行うことができる。</p>
</li>
</ul>
<p>こういうの欲しかった！</p>
<h2 id="Compute_Engine"><a href="https://cloud.google.com/compute/" target="_blank" rel="external">Compute Engine</a></h2>
<ul>
<li>IaaS（Infrastructure-as-a-Service）<br>Googleのインフラ上にホストされている仮想マシン<br>App Engineでは足りない場合はこちらを使う。</li>
</ul>
<p>最近<a href="https://cloud.google.com/container-engine/" target="_blank" rel="external">Container Engine（アルファ版）</a>というのができたようです。</p>
<h2 id="BigQuery"><a href="https://cloud.google.com/bigquery/" target="_blank" rel="external">BigQuery</a></h2>
<p>最近注目のビッグデータ解析用<br>neue氏がC#からも使いやすくしてくれています。<br><a href="http://neue.cc/2014/09/24_479.html" target="_blank" rel="external">LINQ to BigQuery - C#による型付きDSLとLINQPadによるDumpと可視化</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>AWSほど多様なことはできないが、お手軽です。<br>当然C#は使えない(-_-;)<br>データセンターがおそらく日本にないのでレイテンシが気になりますが、<br>AWSもAzureもできたのでそのうちできるのではないかと勝手に思っています。</p>
<h2 id="App_Engine"><a href="https://cloud.google.com/appengine/" target="_blank" rel="external">App Engine</a></h2>
<ul>
<li><p>PaaS（Platform-as-a-Service）<br>使える言語・できることは限られているが<br>プログラムを書いてデプロイしたらすぐにWEBアプリを動かすことができる。</p>
</li>
<li><p>Python、Java、PHP、Goに対応</p>
</li>
<li><p>シャーディング、負荷分散はGoogleがやってくれる。</p>
</li>
<li><p>28 インスタンス時間無料(2014 年 4 月 1 日より)<br>アクセスが多いときは自動でインスタンスが複数立ち上がり分散してくれるが、その分インスタンス時間を消費する<br><a href="http://genesis-tdsg.blogspot.jp/2014/02/gae.html" target="_blank" rel="external">http://genesis-tdsg.blogspot.jp/2014/02/gae.html</a> の実験を参考にすると<br>20～25人のユーザがF5アタックしているような状態まで、１インスタンスで対処することが出来る。</p>
</li>
<li><p>タスクキューで定期的なタスクを実行できる。</p>
</li>
</ul>
<p>Cloud SQL、Cloud Datastore、Cloud Storageと組み合わせることである程度のことまではできそう。</p>
]]>
    
    </summary>
    
      <category term="GAE" scheme="http://teppeee.github.io/tags/GAE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IntelliJ IDEAでGoの開発環境をつくる]]></title>
    <link href="http://teppeee.github.io/2015/01/12/inteliJ-go/"/>
    <id>http://teppeee.github.io/2015/01/12/inteliJ-go/</id>
    <published>2015-01-12T14:34:46.000Z</published>
    <updated>2015-01-13T22:29:23.000Z</updated>
    <content type="html"><![CDATA[<p>社内のプロジェクトでGCEを使っているものがあり、<br>GAEもよさそうだと思い調べていましたが、<br>せっかくなので気になっているGo言語で使ってみようと思います。<br>２年ぶりに見ましたが、ずいぶんわかりやすくなっていました。<br>無料の範囲でいろいろできそうです。</p>
<p><strong><a href="https://cloud.google.com/appengine/?hl=ja" target="_blank" rel="external">AppEngine</a></strong></p>
<a id="more"></a>

<h3 id="まずはGo言語について簡単に">まずはGo言語について簡単に</h3>
<p>Go言語は2009年にGoogleによって作られたオープンソースの静的言語で、Linux・Mac・WindowsやAndroidで動作します。最近ではGoogle App Engineで使うこともできます。</p>
<p><a href="http://golang.jp/about_go" target="_blank" rel="external">golang.jp</a>より</p>
<blockquote>
<ul>
<li>シンプルな言語である。</li>
<li>コンパイル・実行速度が早い。</li>
<li>安全性が高い。</li>
<li>同期処理が容易に行える。</li>
<li>なにより楽しい。</li>
<li>オープンソースである。</li>
</ul>
</blockquote>
<h4 id="学習ソース">学習ソース</h4>
<ul>
<li><a href="http://go-tour-jp.appspot.com/" target="_blank" rel="external">A Tour of Go</a><br>やるだけでかなり基礎を学べる</li>
<li><a href="http://golang.jp/about_go" target="_blank" rel="external">golang.jp</a><br>「Goを学ぶ」のメニューより</li>
</ul>
<p>IDE厨なのでIDEの環境設定から始めます。<br>普段C#でVSを使っているので、IntelliJ IDEAが一番手に馴染みそうです。</p>
<p><a href="http://qiita.com/kaiinui/items/433eb86c022ffcad0bea" target="_blank" rel="external">Go の開発環境は IntelliJ IDEA + golang plugin がマトモだった</a><br>を元にIntelJ IDEAを使ってみます。</p>
<p>Windowsだと思っていたより簡単でした。</p>
<h2 id="1-_InteliJ_IDEAダウンロード">1. InteliJ IDEAダウンロード</h2>
<p>無料のコミュニティエディションをダウンロード<br><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="external">https://www.jetbrains.com/idea/download/</a></p>
<h2 id="2-_プラグインのダウンロード">2. プラグインのダウンロード</h2>
<p>最近リリースされたGo1.4に対応する最新版のプラグインをダウンロード<br><a href="https://github.com/go-lang-plugin-org/go-lang-idea-plugin/releases" target="_blank" rel="external">https://github.com/go-lang-plugin-org/go-lang-idea-plugin/releases</a></p>
<h2 id="3-_プラグインの設定">3. プラグインの設定</h2>
<p>Settings → Plugins →　ダウンロードしたJarファイル指定<br><img src="http://teppeee.github.io/img/goplugin.jpg" alt="goplugin.jpg"></p>
<h2 id="4-_プロジェクト作成でGoが選べる">4. プロジェクト作成でGoが選べる</h2>
<p><img src="http://teppeee.github.io/img/newproject.png" alt="newproject.png"><br>SDKの設定は環境変数のGOROOT(C:\Go)</p>
<h2 id="5-_go_getで取得したソースの補完設定">5. go getで取得したソースの補完設定</h2>
<p>goのよいところで<code>go get</code>で簡単にgithubなどに置いてある<br>オープンソースライブラリをとってきて使うことができます。<br>とってきたパッケージは環境変数のGOPATHで指定しているパスに入るようです。<br>そのままだと補完が効かないので<br>file →　Project Structure →　SoucePath<br>でGOPATH/srcを設定します。</p>
<p>最近保存時のgo fmtに対応したようで、自動で整形してくれます。<br>IntelliJ IDEAは使ったことなかったですが、なかなか便利です。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>社内のプロジェクトでGCEを使っているものがあり、<br>GAEもよさそうだと思い調べていましたが、<br>せっかくなので気になっているGo言語で使ってみようと思います。<br>２年ぶりに見ましたが、ずいぶんわかりやすくなっていました。<br>無料の範囲でいろいろできそうです。</p>
<p><strong><a href="https://cloud.google.com/appengine/?hl=ja" target="_blank" rel="external">AppEngine</a></strong></p>
]]>
    
    </summary>
    
      <category term="IntelliJIDEA" scheme="http://teppeee.github.io/tags/IntelliJIDEA/"/>
    
      <category term="Go言語" scheme="http://teppeee.github.io/tags/Go%E8%A8%80%E8%AA%9E/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Windows8でユーザーのフォルダ名が日本語になっている問題]]></title>
    <link href="http://teppeee.github.io/2015/01/04/windows8-userfolder/"/>
    <id>http://teppeee.github.io/2015/01/04/windows8-userfolder/</id>
    <published>2015-01-04T07:27:43.000Z</published>
    <updated>2015-01-12T14:45:34.000Z</updated>
    <content type="html"><![CDATA[<p>あけましておめでとうございます。<br>今年まず最初にやるのはWindowsのフォルダ名の修正です。</p>
<p>Windows8のインストール時にMicrosoftアカウントでアカウント設定をすると<br>Usersに日本語名でフォルダができてしまいます。<br>単純にユーザー名変更では変更することができません。<br>ずっと放置していましたが、海外製ライブラリで問題になることが多かったので、<br>修正方法を調べてみました。　<br>いろいろでてきますが、自分がした方法をまとめます。<br>(Windows8.1でMicrosoftアカウントを使用している状態から)</p>
<a id="more"></a>

<h2 id="変更方法">変更方法</h2>
<ol>
<li>Winキー検索　→　PC設定　→　アカウント　→　関連付けを解除<br>ローカルアカウントの切り替え画面がでるので変更したい日本語でないアカウント名にする。<br><img src="https://teppeee.github.io/2015/01/04/windows8-userfolder/localaccount.png" alt="localaccount.png"></li>
<li>1.とは別にローカルアカウントで管理者権限のアカウントを作成</li>
<li>再起動して2. で作成したアカウントでログイン</li>
<li>元の「C:\Users」の日本語ユーザーのフォルダを1.のアカウント名にリネーム<br>(リネームできない場合は掴んでいるプロセスがいるので終了させます。)</li>
<li>regeditを開いて、「HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\」の該当アカウントの「ProfileImagePath 」<br>を開き、Usersフォルダ名をリネームします。</li>
<li>ログアウト後、リネームしたユーザでログインして<br>ユーザー環境変数で日本語フォルダ名のままのものがある場合は修正</li>
<li>PC設定より再度Microsoftアカウントに関連付けて終了</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>あけましておめでとうございます。<br>今年まず最初にやるのはWindowsのフォルダ名の修正です。</p>
<p>Windows8のインストール時にMicrosoftアカウントでアカウント設定をすると<br>Usersに日本語名でフォルダができてしまいます。<br>単純にユーザー名変更では変更することができません。<br>ずっと放置していましたが、海外製ライブラリで問題になることが多かったので、<br>修正方法を調べてみました。　<br>いろいろでてきますが、自分がした方法をまとめます。<br>(Windows8.1でMicrosoftアカウントを使用している状態から)</p>
]]>
    
    </summary>
    
      <category term="Windows8" scheme="http://teppeee.github.io/tags/Windows8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown記法]]></title>
    <link href="http://teppeee.github.io/2014/12/23/markdown/"/>
    <id>http://teppeee.github.io/2014/12/23/markdown/</id>
    <published>2014-12-22T17:44:57.000Z</published>
    <updated>2015-01-04T09:05:05.000Z</updated>
    <content type="html"><![CDATA[<p>Markdownで書かれた文書を見る機会が増えてきました。<br>GitHubのREADMEであったり、Qiitaであったり、Redmineも2.5で対応しました。<br>このブログもMarkdownで書かれています。</p>
<a id="more"></a>


<p>私も以前はメモをただのテキストで書いていましたが<br>最近はMarkdownを使っています。<br>文書が構造化されて見やすくなりますし、まとまります。<br>コードが綺麗に見えるのがいいですね。</p>
<h2 id="Markdownとは">Markdownとは</h2>
<p>どんなものかはこちらを参照</p>
<ul>
<li><p><a href="http://kojika17.com/2013/01/starting-markdown.html" target="_blank" rel="external">文章作成やメモ書きにも便利、Markdown記法</a></p>
</li>
<li><p><a href="http://qiita.com/Qiita/items/c686397e4a0f4f11683d" target="_blank" rel="external">Markdown記法 チートシート</a></p>
</li>
</ul>
<h2 id="エディタ">エディタ</h2>
<p>簡単に書けると言ってもエディタのサポートが欲しいです。<br>Macは<a href="http://kobito.qiita.com/ja" target="_blank" rel="external">kobito</a>が使えるので羨ましい。</p>
<p>Windowsはこれといったのがないですね。</p>
<ul>
<li><a href="http://pad.haroopress.com/" target="_blank" rel="external">haroopad</a><br>記法ヘルプつきで初心者にはやさしいです<br>わたしはこれ使っています。<br>コードブロックでQiita Markdownのようにファイル名を指定するとプレビューできなくなります。</li>
</ul>
<ul>
<li><p><a href="https://atom.io/" target="_blank" rel="external">atom</a><br>Github製エディタ<br>通常エディタとしてはまだ安定性にかけますが、Markdownエディタとしては使えます。</p>
</li>
<li><p><a href="http://qiita.com/tatesuke/items/a724c6da7284d72a0b1d" target="_blank" rel="external">Markdownを使うのに環境構築なんて不要!?</a><br>会社の人にもjsライブラリを教えてもらいましたが、<br>こういう方法もあるみたい。</p>
</li>
</ul>
<h2 id="方言の問題がある">方言の問題がある</h2>
<p>仕様が定まっていないです。<br>標準化の動きはあるようです。</p>
<p> <a href="http://www.infoq.com/jp/news/2014/09/markdown-commonmark" target="_blank" rel="external">Standard MarkdownがCommon Markdow、そしてCommonMarkに</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Markdownで書かれた文書を見る機会が増えてきました。<br>GitHubのREADMEであったり、Qiitaであったり、Redmineも2.5で対応しました。<br>このブログもMarkdownで書かれています。</p>
]]>
    
    </summary>
    
      <category term="Markdown" scheme="http://teppeee.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HEXOについて]]></title>
    <link href="http://teppeee.github.io/2014/12/17/about-hexo1/"/>
    <id>http://teppeee.github.io/2014/12/17/about-hexo1/</id>
    <published>2014-12-16T17:12:47.000Z</published>
    <updated>2015-01-04T13:02:43.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Documentation">Documentation</h2>
<ul>
<li><a href="http://hexo.io/docs/" target="_blank" rel="external">http://hexo.io/docs/</a></li>
</ul>
<p>公式みつつ、いろいろ試してみます。</p>
<a id="more"></a>

<h2 id="コードハイライト">コードハイライト</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">``` <span class="attr_selector">[language]</span> <span class="attr_selector">[title]</span> <span class="attr_selector">[url]</span> <span class="attr_selector">[link text]</span></div><div class="line"><span class="tag">code</span> <span class="tag">snippet</span></div><div class="line">```</div></pre></td></tr></table></figure>

<p>で指定する</p>
<p><a href="https://highlightjs.org/" target="_blank" rel="external">highlight.js</a>を使っている模様<br>大抵の言語に対応していて便利！</p>
<figure class="highlight cs"><figcaption><span>sample.txt</span><a href="http://sample.com" target="_blank" rel="external">リンク</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//サンプル</span></div><div class="line"><span class="keyword">string</span> hoge = <span class="string">"テスト"</span>;</div><div class="line">Console.WriteLine(hoge);</div></pre></td></tr></table></figure>

<h2 id="画像の設定">画像の設定</h2>
<p>まず_config.yml で</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">post_asset_folder</span>: <span class="string">true</span></div></pre></td></tr></table></figure>

<p>を設定</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> &lt;title&gt;</div></pre></td></tr></table></figure>

<p>で\source_posts\の中にtitleフォルダができるので画像をいれれば使えます。<br>ただテーマのせいか参照の仕方がめんどくさいです。</p>
<p><img src="http://teppeee.github.io/2014/12/17/about-hexo1/ff_x_m1_019.JPG" alt="ff_x_m1_019.JPG"></p>
<p>まあこれだけあればブログは書けそうです。</p>
<h2 id="Google_Analytics設定">Google Analytics設定</h2>
<p>_config.ymlで</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># Miscellaneous</span></div><div class="line">google_analytics: UA-xxxxxxxx-x</div></pre></td></tr></table></figure>

<p>\themes\apollo の中にも_config.ymlがあり、<br>設定しても反映されなくて何度もレイアウトファイル見直してしまいました。。</p>
<h2 id="レイアウト調整">レイアウト調整</h2>
<p>\themes\apollo\layoutをいぢる<br>テーマによっては<code>&lt;!-- more --&gt;</code>を記事本文にいれることで<br>全文表示しなくなります。</p>
<h2 id="その他">その他</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">server</span></div></pre></td></tr></table></figure>

<p>でローカルでサーバー起動して記事の確認ができますが、<br>編集した内容がリアルタイムで反映されるようです。</p>
<p><img src="http://teppeee.github.io/2014/12/17/about-hexo1/hexo_server_sample.png" alt="hexo_server_sample.png"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Documentation">Documentation</h2>
<ul>
<li><a href="http://hexo.io/docs/" target="_blank" rel="external">http://hexo.io/docs/</a></li>
</ul>
<p>公式みつつ、いろいろ試してみます。</p>
]]>
    
    </summary>
    
      <category term="hexo" scheme="http://teppeee.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[アドベントカレンダーの季節になりました]]></title>
    <link href="http://teppeee.github.io/2014/12/08/adventcalender2014/"/>
    <id>http://teppeee.github.io/2014/12/08/adventcalender2014/</id>
    <published>2014-12-07T21:46:43.000Z</published>
    <updated>2014-12-08T18:21:47.000Z</updated>
    <content type="html"><![CDATA[<p>この時期は毎年エンジニア達がヨーロッパの<a href="http://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC" target="_blank" rel="external">アドベントカレンダーの風習</a>にちなんで<br>12月1～24日まで１日ずつ何かのテーマについて記事を書くイベントがあります。</p>
<p>結構深いネタが多く、見るだけでも楽しめます。<br>私は今年はC#、Go、Js関連をメインで見ています。</p>
<ul>
<li><a href="http://qiita.com/advent-calendar" target="_blank" rel="external">アドベントカレンダーQiita</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>この時期は毎年エンジニア達がヨーロッパの<a href="http://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%]]>
    </summary>
    
      <category term="Advent Calendar" scheme="http://teppeee.github.io/tags/Advent-Calendar/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ブログを作るまで(GithubPages+HEXO)]]></title>
    <link href="http://teppeee.github.io/2014/12/03/GithubPages-Hexo/"/>
    <id>http://teppeee.github.io/2014/12/03/GithubPages-Hexo/</id>
    <published>2014-12-03T05:11:42.000Z</published>
    <updated>2015-01-04T09:04:47.000Z</updated>
    <content type="html"><![CDATA[<p>このブログですがGithubPages+HEXOで作成しました。<br>最近のブログはGitHubPagesと静的サイトジェネレーターを使って作るのが流行らしいです。<br>この方法のデメリットの大部分が技術者でないと難しいという内容だったため<br>そこはクリアできると判断。いちおうプログラマーなので・・</p>
<a id="more"></a>

<p>静的サイトジェネレーターもいろいろありますね。</p>
<ul>
<li><a href="http://matome.naver.jp/odai/2138951779950545401" target="_blank" rel="external">静的サイトジェネレータ（Static Site Generator）まとめ</a></li>
</ul>
<ul>
<li><a href="https://staticsitegenerators.net/" target="_blank" rel="external">Static Site Generators</a></li>
</ul>
<p>一番人気はJekyllでそれをブログ用に拡張したのが<br>Octopressのようです。</p>
<p>まずはOctopressでと思い調べてみると<br>重くてmiddlemanに乗り換えたという記事がやたらと出てきました。</p>
<p>middlemanはRuby使える人にとっては拡張しやすくてよさそうですが、<br>テーマ等はあまりなく、自分でデザインしないといけないようです。</p>
<p>そんな中、<br><a href="http://liginc.co.jp/web/programming/server/104594" target="_blank" rel="external">所要時間3分!? Github PagesとHEXOで爆速ブログ構築してみよう！</a></p>
<p>の記事を見て、Node.jsもインストールされているし<br>JavaScriptのほうがまだ使えるので良さそうに思いました。<br>Documentもそこそこあるようです。</p>
<h2 id="ハマったところ">ハマったところ</h2>
<p>基本的に<a href="http://liginc.co.jp/web/programming/server/104594" target="_blank" rel="external">「所要時間3分!? Github PagesとHEXOで爆速ブログ構築してみよう！」</a><br>の記事通りでいけますが、<br>Githubへのdeployがうまくいきませんでした。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> deploy -g</div></pre></td></tr></table></figure>

<p>で<br>[info] Deploy done:github<br>となったがdeployされておらず</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> deploy</div></pre></td></tr></table></figure>

<p>とすると</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">Error</span>: <span class="tag">spawn</span> <span class="tag">ENOENT</span></div><div class="line">    <span class="tag">at</span> <span class="tag">errnoException</span> (<span class="tag">child_process</span><span class="class">.js</span><span class="pseudo">:980</span><span class="pseudo">:11)</span></div><div class="line">    <span class="tag">at</span> <span class="tag">Process</span><span class="class">.ChildProcess</span><span class="class">._handle</span><span class="class">.onexit</span> (<span class="tag">child_process</span><span class="class">.js</span><span class="pseudo">:771</span><span class="pseudo">:34)</span></div></pre></td></tr></table></figure>

<p>エラーができました。</p>
<p>いろいろ調べたところ・・・</p>
<p>GitにPATHが通ってませんでした。<br>初歩的な分ハマった。。</p>
<p>気をとりなして</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> deploy</div></pre></td></tr></table></figure>

<p>すると</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Permission denied (publickey).</div><div class="line">fatal: Could <span class="operator">not</span> <span class="built_in">read</span> <span class="built_in">from</span> remote repository.</div><div class="line"></div><div class="line">Please make sure you have <span class="operator">the</span> correct access rights</div><div class="line"><span class="operator">and</span> <span class="operator">the</span> repository exists.</div></pre></td></tr></table></figure>

<p>次はsshのエラーがでました。</p>
<p>C:\Users\（ユーザー名）\.sshのフォルダを作って<br>id_rsa　というファイル名で秘密鍵<br>id_rsa.pub というファイル名で公開鍵を保存します。</p>
<p><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" target="_blank" rel="external">puttygen.exe</a>を使う場合はmsysgitのSSHはOpenSSHなので<br>秘密鍵はメニューの「変換」→「OpenSSH形式へエクスポート」で保存<br>公開鍵は　テキストエリア「OpenSSHのauthorized_keysファイルに･･･」をコピペで保存</p>
<p>　</p>
<p>これで</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> &lt;title&gt;</div></pre></td></tr></table></figure>

<p>で記事を作って<br>source\_posts　のmdファイルを編集し</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> deploy -g</div></pre></td></tr></table></figure>

<p>で公開できる環境ができました。</p>
<p>まだまだ機能が少ないので調査しつつ足していく予定です。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>このブログですがGithubPages+HEXOで作成しました。<br>最近のブログはGitHubPagesと静的サイトジェネレーターを使って作るのが流行らしいです。<br>この方法のデメリットの大部分が技術者でないと難しいという内容だったため<br>そこはクリアできると判断。いちおうプログラマーなので・・</p>
]]>
    
    </summary>
    
      <category term="hexo" scheme="http://teppeee.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ブログ開始]]></title>
    <link href="http://teppeee.github.io/2014/12/01/start/"/>
    <id>http://teppeee.github.io/2014/12/01/start/</id>
    <published>2014-11-30T22:13:35.000Z</published>
    <updated>2014-12-03T12:35:51.000Z</updated>
    <content type="html"><![CDATA[<p>技術的に興味関心のあることを発信し</p>
<p>みなさまの選択の幅を少しでも広げれればと思います。</p>
<p>普段はC#.NETで開発をしていますが、<br>Microsoftもオープンソースな部分が増えましたし、<br>C#の良さを少しでも広めたいという思いもあります。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>技術的に興味関心のあることを発信し</p>
<p>みなさまの選択の幅を少しでも広げれればと思います。</p>
<p>普段はC#.NETで開発をしていますが、<br>Microsoftもオープンソースな部分が増えましたし、<br>C#の良さを少しでも広めたいという思いもありま]]>
    </summary>
    
  </entry>
  
</feed>
